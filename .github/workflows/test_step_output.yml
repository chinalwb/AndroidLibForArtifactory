
name: Delete and Rebuild

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

  
jobs:
  weekday_job:
    runs-on: ubuntu-latest
    env:
      SDK_VERSION: 2.0.7
  
  DeleteExistingPackage:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Get packages list
        run: |
          curl -X POST \
            -s \
            -H "Accept: application/vnd.github.package-deletes-preview+json" \
            -H "Authorization: bearer ${{ secrets.GITHUB_TOKEN }}" \
            -d '{"query":"query { repository(owner: \"chinalwb\", name:\"AndroidLibForArtifactory\") { packages(first: 20, names: \"com.chinalwb.libraries.droidlib\") {edges {node {id, name, versions(first:100) {edges {node {id, version}}}}}}}}"}' \
            -o /tmp/github_response.json \
            --url https://api.github.com/graphql
            
      - name: Print cat response
        run: cat /tmp/github_response.json
      
      - name: Create idfile
        run: echo -e "import json, sys\nidfile = open('/tmp/idfile', 'w')\nidfile.close()" | python

      - name: Define version to delete
        id: versionNameStep
        run: echo "::set-output name=version::${{ env.SDK_VERSION }}"
        
      - name: Filter version id
        # run: echo -e "import json, sys\nf = open('/tmp/github_response.json',)\nobj = json.load(f)\npackages=obj['data']['repository']['packages']['edges'][0]['node']['versions']['edges']\nfor p in packages:\n  if p['node']['version'] == '2.0.9-SNAPSHOT':\n    idfile = open('/tmp/idfile', 'w')\n    idfile.write(p['node']['id'])\n    idfile.close()\n    break" | python
        run: echo -e "import json, sys\nf = open('/tmp/github_response.json',)\nobj = json.load(f)\npackages=obj['data']['repository']['packages']['edges'][0]['node']['versions']['edges']\nfor p in packages:\n  if p['node']['version'] == '"${{steps.versionNameStep.outputs.version}}"':\n    idfile = open('/tmp/idfile', 'w')\n    idfile.write(p['node']['id'])\n    idfile.close()\n    break" | python

      - name: Print cat idfile
        run: cat /tmp/idfile
        
      - name: Set package version id
        id: versionIdStep
        run: echo "::set-output name=id::"$(cat /tmp/idfile)

      - name: Delete package version if exists
        # run: echo "package version id = " ${{ steps.versionIdStep.outputs.id }}
        uses: actions/delete-package-versions@v1
        if: steps.versionIdStep.outputs.id != ''
        with:
          package-version-ids: ${{ steps.versionIdStep.outputs.id }}
          
          
   
  Rebuild:
    runs-on: ubuntu-latest
    needs: DeleteExistingPackage

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11

      - name: Clean project
        run: ./gradlew :droidlibrary:clean
     
      - name: Assemble project
        run: ./gradlew :droidlibrary:assemble
      
      - name: Check files
        run: |
          pwd
          cd droidlibrary/build/outputs/aar
          pwd
          ls
          cd ..
          pwd
          ls
          gradle --version
          
      - name: Upload mapping file
        uses: actions/upload-artifact@v2
        with:
          name: mapping-for-v${{ env.SDK_VERSION }}
          path: droidlibrary/build/outputs/mapping/release
          
      - name: Publish lib to GitHub
        env:
          GITHUB_USERNAME: x-access-token
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: 
          gradle :droidlibrary:publishDroidlibPublicationToGithubPackagesRepository
